Oprators:
    - OF 
        help to create observable form array, obj or string.
        students: Observable<string[]> = of(['marks', 'ram', 'laxaman']);

    -FROM
        create observable from an array an array-like objects
        students : Observable<string> = form['data','data2','data3'];
        
    -FROM EVENT
        create an observable that emits of specific type comming from targeted EVENT
        ex(
            in ts make @viewchild 
                @viewchild('ChildName')
                ChildName: ElementRef; it gives reference to ChildName
            in html make Event like click, change, mouseOver, etc;
                <button #ChildName (click)= "MethodName()"> Example </button>
            in ts make it observable
                MethodName(){
                    const btnObservable = fromEvent(this.ChildName.nativeElement,'click');
                    btnObservable.subscibe(data=> {
                        console.log(data);
                    });
                }
                fromEvent fisr one is native element and second is Event

        )

    -INTERVAL
        create observable that emits SEQUENTIAL numbers every specific INTERVAL of time.
        const Number = interval(10000) 1000 reference period


    -DEBOUNCETIME
        Emits a notification or data after some time
        It usefull for task that run after some specific time.

    -TAKE
        IT takes only count values from observable
        take(2),

    -TAKEWHILE
        Emits value upto it satisfying the condition
        takWhile((value)=> {value < 3}),

    -TAKELAST
        after obsrervable compete emiting then take N value 
            from emited values.
        takeLast(2),

    -FIRST
        It is totally opposiye to the takeLast
        it give first value that emited by observable
        takeFirst(),

    -LAST
        it give last value that emits from observable
        last(),

    -ELEMENTAT
        it give values from specific position
        elementAt(5),

    -FILTER
        filter the values on basic of predicate function or
            condition.
        filter((v)=> {
            condition
        })
        